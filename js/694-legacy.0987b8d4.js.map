{"version":3,"file":"js/694-legacy.0987b8d4.js","mappings":"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","sources":["webpack://lithophane-generator-vue/../lithophane-generator/pkg/lithophane_generator.js","webpack://lithophane-generator-vue/../lithophane-generator/pkg/lithophane_generator_bg.js"],"sourcesContent":["import * as wasm from \"./lithophane_generator_bg.wasm\";\nimport { __wbg_set_wasm } from \"./lithophane_generator_bg.js\";\n__wbg_set_wasm(wasm);\nexport * from \"./lithophane_generator_bg.js\";\n","let wasm;\nexport function __wbg_set_wasm(val) {\n    wasm = val;\n}\n\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n/**\n*/\nexport function init() {\n    wasm.init();\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachedInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* @param {string} x_expression\n* @param {string} y_expression\n* @param {string} z_expression\n* @param {Uint8Array} image\n* @param {number} white_depth\n* @param {number} black_depth\n* @returns {Uint8Array}\n*/\nexport function generate_lithophane(x_expression, y_expression, z_expression, image, white_depth, black_depth) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(x_expression, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(y_expression, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(z_expression, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        const ptr3 = passArray8ToWasm0(image, wasm.__wbindgen_malloc);\n        const len3 = WASM_VECTOR_LEN;\n        wasm.generate_lithophane(retptr, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3, white_depth, black_depth);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        if (r3) {\n            throw takeObject(r2);\n        }\n        var v4 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v4;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {string} x_expression\n* @param {string} y_expression\n* @param {string} z_expression\n* @param {number} width\n* @param {number} height\n* @param {number} step\n* @returns {Uint8Array}\n*/\nexport function generate_preview(x_expression, y_expression, z_expression, width, height, step) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(x_expression, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(y_expression, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(z_expression, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        wasm.generate_preview(retptr, ptr0, len0, ptr1, len1, ptr2, len2, width, height, step);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        if (r3) {\n            throw takeObject(r2);\n        }\n        var v3 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v3;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {Uint8Array} image\n* @returns {ImageDimensions}\n*/\nexport function get_image_dimensions(image) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passArray8ToWasm0(image, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.get_image_dimensions(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return ImageDimensions.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n*/\nexport class ImageDimensions {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ImageDimensions.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_imagedimensions_free(ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get width() {\n        const ret = wasm.__wbg_get_imagedimensions_width(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} arg0\n    */\n    set width(arg0) {\n        wasm.__wbg_set_imagedimensions_width(this.ptr, arg0);\n    }\n    /**\n    * @returns {number}\n    */\n    get height() {\n        const ret = wasm.__wbg_get_imagedimensions_height(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} arg0\n    */\n    set height(arg0) {\n        wasm.__wbg_set_imagedimensions_height(this.ptr, arg0);\n    }\n}\n\nexport function __wbindgen_error_new(arg0, arg1) {\n    const ret = new Error(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nexport function __wbg_new_abda76e883ba8a5f() {\n    const ret = new Error();\n    return addHeapObject(ret);\n};\n\nexport function __wbg_stack_658279fe44541cf6(arg0, arg1) {\n    const ret = getObject(arg1).stack;\n    const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport function __wbg_error_f851667af71bcfc6(arg0, arg1) {\n    try {\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        wasm.__wbindgen_free(arg0, arg1);\n    }\n};\n\nexport function __wbindgen_object_drop_ref(arg0) {\n    takeObject(arg0);\n};\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n"],"names":["__wbg_set_wasm","wasm","val","lTextDecoder","TextDecoder","module","require","cachedTextDecoder","ignoreBOM","fatal","decode","cachedUint8Memory0","getUint8Memory0","byteLength","Uint8Array","memory","buffer","getStringFromWasm0","ptr","len","subarray","heap","Array","fill","undefined","push","heap_next","length","addHeapObject","obj","idx","getObject","dropObject","takeObject","ret","init","WASM_VECTOR_LEN","lTextEncoder","TextEncoder","cachedTextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","written","passStringToWasm0","malloc","realloc","mem","offset","code","charCodeAt","slice","passArray8ToWasm0","cachedInt32Memory0","getInt32Memory0","Int32Array","getArrayU8FromWasm0","generate_lithophane","x_expression","y_expression","z_expression","image","white_depth","black_depth","retptr","__wbindgen_add_to_stack_pointer","ptr0","__wbindgen_malloc","__wbindgen_realloc","len0","ptr1","len1","ptr2","len2","ptr3","len3","r0","r1","r2","r3","v4","__wbindgen_free","generate_preview","width","height","step","v3","get_image_dimensions","ImageDimensions","__wrap","_classCallCheck","_createClass","key","value","this","__destroy_into_raw","__wbg_imagedimensions_free","get","__wbg_get_imagedimensions_width","arg0","__wbg_set_imagedimensions_width","__wbg_get_imagedimensions_height","__wbg_set_imagedimensions_height","Object","create","prototype","__wbindgen_error_new","arg1","Error","__wbg_new_abda76e883ba8a5f","__wbg_stack_658279fe44541cf6","stack","__wbg_error_f851667af71bcfc6","console","error","__wbindgen_object_drop_ref","__wbindgen_throw"],"sourceRoot":""}